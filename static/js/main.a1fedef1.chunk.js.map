{"version":3,"sources":["components/MicControls.js","components/Notes.js","components/NotesControls.js","containers/App.js","serviceWorker.js","index.js"],"names":["MicControls","_ref","onListenClick","react_default","a","createElement","className","onClick","id","src","alt","height","width","Notes","showNotesText","addUserInput","placeholder","value","onChange","NotesControls","onDateClick","onCopyClick","onClearClick","data-toggle","data-placement","data-content","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetch","then","response","text","token","stream","recognizeMicrophone","access_token","imgMicrophone","document","getElementById","classList","add","setEncoding","on","data","notes","state","concat","setState","bind","assertThisInitialized","err","console","log","querySelector","addEventListener","stop","remove","catch","error","event","target","textField","innerText","body","appendChild","select","execCommand","Date","toLocaleString","src_components_MicControls","src_components_Notes","src_components_NotesControls","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1fedef1.chunk.js","sourcesContent":["import React from 'react';\nimport './MicControls.css';\n\nconst MicControls = ({onListenClick}) => {\n    return (\n        <div className=\"micControls\">\n          <button className=\"btn btn-danger btn-round\" onClick={onListenClick}>Listen to microphone</button>\n          <img id=\"mic\" src=\"favicon.ico\" alt=\"\" height=\"32\" width=\"32\"/>\n          <button id=\"stop\" className=\"btn btn-primary btn-round\">Pause recording</button>\n        </div>\n    );\n}\n\nexport default MicControls;","import React from 'react';\nimport './Notes.css';\n\nconst Notes = ({showNotesText, addUserInput}) => {\n    return (\n        <textarea id=\"notes\" placeholder=\"Your notes\" value={showNotesText} onChange={addUserInput} />\n    );\n}\n\nexport default Notes;","import React from 'react';\nimport './NotesControls.css';\n\nconst NotesControls = ({onDateClick, onCopyClick, onClearClick}) => {\n    return (\n        <div className=\"notesControls\">\n          <button className=\"btn btn-info btn-round\" onClick={onDateClick}><i className=\"fa fa-calendar\"></i>Add current date-time</button>\n          <button className=\"btn btn-info btn-round\" onClick={onCopyClick} data-toggle=\"popover\" data-placement=\"top\" data-content=\"Copied!\"><i className=\"fa fa-copy\"></i>Copy</button>\n          <button className=\"btn btn-info btn-round\" onClick={onClearClick}><i className=\"fa fa-remove\"></i>Clear</button>\n        </div>\n    );\n}\n\nexport default NotesControls;","import React, { Component } from 'react';\nimport recognizeMicrophone from 'watson-speech/speech-to-text/recognize-microphone';\nimport './App.css';\nimport MicControls from '../components/MicControls';\nimport Notes from '../components/Notes';\nimport NotesControls from '../components/NotesControls';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      text: ''\n    }\n  }\n\n  onListenClick = () => {\n    fetch('/api/speech-to-text/token')\n      .then((response) => {\n        return response.text();\n      }).then((token) => {\n        var stream = recognizeMicrophone({\n          access_token: token\n        });\n\n        var imgMicrophone = document.getElementById(\"mic\");\n        imgMicrophone.classList.add(\"active\");\n\n        stream.setEncoding('utf8');\n\n        stream.on('data', function (data) {\n          var notes = this.state.text.concat(data);\n          this.setState({ text: notes });\n        }.bind(this));\n\n        stream.on('error', function (err) {\n          console.log(err);\n        });\n\n        document.querySelector('#stop').addEventListener('click', () => {\n          stream.stop();\n          imgMicrophone.classList.remove(\"active\");\n        });\n      }).catch((error) => {\n        console.log(error);\n      });\n  }\n\n  addUserInput(event) {\n    this.setState({ text: event.target.value });\n  }\n\n  onCopyClick() {\n    var textField = document.createElement('textarea')\n    textField.innerText = this.state.text;\n    document.body.appendChild(textField)\n    textField.select();\n    document.execCommand(\"copy\");\n    textField.remove();\n  }\n\n  onDateClick() {\n    var dateToday = new Date().toLocaleString() + ': ';\n    var notes = dateToday.concat(this.state.text);\n    this.setState({ text: notes });\n  }\n\n  onClearClick() {\n    this.setState({ text: '' });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MicControls onListenClick={this.onListenClick.bind(this)} />\n        <Notes showNotesText={this.state.text} addUserInput={this.addUserInput.bind(this)} />\n        <NotesControls onDateClick={this.onDateClick.bind(this)} onCopyClick={this.onCopyClick.bind(this)} onClearClick={this.onClearClick.bind(this)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}